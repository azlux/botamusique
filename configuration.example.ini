# ========================================================
#  botamusique example configuration file
#  Version 6
# ========================================================
#  Rename this file to configuration.ini after editing.
#  Uncomment lines you'd like to change, and carefully
#  follow the instructions.
# ========================================================

# The [server] section tells the bot how to connect to your Murmur server.
# This section will be overridden by command line arguments.
[server]
host = 127.0.0.1
port = 64738
#password =
#channel =
#tokens = token1,token2
#certificate =

# The [bot] section stores some basic settings for the bot.
[bot]
# 'username': The bot's username.
# 'comment': Comment displayed on the bot's profile.
# 'avatar': Path to an image used for the bot's avatar (PNG recommended, 128 KB max).
#username = botamusique
#comment = "Hi, I'm here to play radio, local music or youtube/soundcloud music. Have fun!"
#avatar =

# 'language': Language to use; available languages can be found inside
#    the lang/ folder.
#language=en_US

# 'music_folder': Folder that stores your local songs.
#music_folder = music_folder/

# 'database_path': The path of the database, which stores things like your
#    volume set by the !volume command, your playback mode and your playlist,
#    banned URLs, etc.
#    This option will be overridden by command line arguments.
# 'music_database_path': The path of the database that stores the music library.
#    Can be disabled by setting 'save_music_library = False'
#database_path=settings.db
#music_database_path=music.db

# 'admin': List of users allowed to kill the bot, or ban URLs.
#    Separated by ';'.
#admin = User1;User2;

# 'stereo': Enable stereo stream transmission, supported since Mumble 1.4.0.
#    If this is not enabled, the bot will downgrade stereo sound into mono.
#stereo = True

# 'volume': The default volume, a number from 0 to 1.
#    This option will be overridden by the value set in the database.
#volume = 0.1

# 'bandwidth': The number of bits per second used by the bot when streaming audio.
#    Enabling this option will allow you to set it higher than the default value.
#    If the given value exceeds the server's bitrate, the bitrate used by the bot
#    will match the server's.
#bandwidth = 200000

# 'playback_mode': The playback mode of the bot. It should be one of the below:
#     one-shot: remove item once it has finished playing
#     repeat: repeat the playlist
#     random: randomize the order of the playlist
#     autoplay: randomly pick a track from the music library
#    This option will be overridden by the value set in the database.
# 'autoplay_length': How many songs to fill the playlist with in autoplay mode.
# 'clear_when_stop_in_oneshot': Whether to clear the playlist when stopping the
#    bot in one-shot mode.
#playback_mode = one-shot
#autoplay_length = 5
#clear_when_stop_in_oneshot = False

# 'target_version': version to fetch when updating:
#    stable: use the curl command to get stable releases
#    testing: follow git master branch using the git command
#target_version = stable

# 'tmp_folder': Folder that music will be downloaded into.
# 'tmp_folder_max_size': Maximum size of tmp_folder in MB, or 0 to not cache
#    at all, or -1 for unlimited size
# 'ignored_files', 'ignored_folders': Files and folders to ignore during scanning.
#tmp_folder = /tmp/
#tmp_folder_max_size = 10
#ignored_folders = tmp
#ignored_files = Thumbs.db

# 'download_attempts': How many times to attempt a download.
#download_attempts = 2

# 'auto_check_update': Whether to check for updates every time the bot starts,
#    and post the changelog after an update was applied.
#auto_check_update = True
#pip3_path = venv/bin/pip

# 'logfile': File to write log messages to.
# 'redirect_stderr': Whether to capture outputs from standard error and write
#    it into the log file. Useful for capturing an exception message when the
#    bot crashes.
#logfile =
#redirect_stderr = False

#announce_current_music = True
#allow_other_channel_message = False
#allow_private_message = True

# 'delete_allowed': Whether to allow admins to delete a file from the library
#    stored on disk. Works for both command and web interfaces.
#delete_allowed = True

# 'save_music_library': Whether to save music metadata to the database.
#save_music_library = True

# 'refresh_cache_on_startup': Whether to refresh the music directory's cache when
#    starting up. Metadata from each file will not be refreshed. If this is False,
#    the cache from last time will be used.
#refresh_cache_on_startup = True

# 'save_playlist': Whether to save the current playlist before quitting, so that
#    it may be reloaded next time. To use this, save_music_library must be True.
#save_playlist = True

# 'max_volume': Maximum volume users are allowed to set.
#    Number between 0.0 - 1.0.
#max_volume = 0.8

# 'max_track_playlist': The maximum amount of tracks allowed in a playlist.
#max_track_playlist = 20

# 'max_track_duration': Maximum track duration in minutes.
#max_track_duration = 60

# 'ducking': Whether to lower music volume when someone is talking.
#ducking = False
#ducking_volume = 0.05
#ducking_threshold = 3000

# 'when_nobody_in_channel': Behaviour of the bot when nobody is in the channel.
#    Has to be one of:
#     pause: pause the current track
#     pause_resume: pause the current track and resume it once someone joins
#     stop: stop the bot, clearing its playlist
#    Or you can leave it empty to take no action.
#when_nobody_in_channel =

# 'when_nobody_in_channel_ignore': List of users that should be ignored.
#    This is typically used when other bots are present in the channel.
#when_nobody_in_channel_ignore =

# 'youtube_query_cookie': Sometimes YouTube will block the bot's request and ask
#    the bot to complete a captcha to verify the request is made by a human. This
#    can be solved if the bot has a valid cookie. If the bot complains "unable to
#    query youtube", you should provide a value here.
#youtube_query_cookie = {"CONSENT": "paste your CONSENT cookie value here"}

# The [webinterface] section stores settings related to the web interface.
[webinterface]
# 'enabled': Whether to enable the web interface to allow managing your playlist,
#    uploading tracks, etc.
#    The web interface is disabled by default for security and performance reasons.
# 'access_address': URL provided to users when the public URL for the
#    web interface is requested.
#enabled = False
#listening_addr = 127.0.0.1
#listening_port = 8181
#is_web_proxified = True
#access_address = http://127.0.0.1:8181

# 'web_logfile': If this is provided, web server access logs are written to this file.
#web_logfile =

# 'auth_method': Method used to authenticate users accessing the web interface.
#    One of 'none', 'password' or 'token'. If this is set to 'token', a unique token
#    is used for authentication.
# 'max_attempts': Amount of incorrect login attempts needed before being banned.
#    Regenerating a token or rebooting the bot will reset this number.
#auth_method = token
#max_attempts = 10

# 'user', 'password': If auth_method is set to 'password', you'll need to set
#    the default username and password, which is set by these two options.
#    You can add more users using the '!webadduser' command.
#user = botamusique
#password = mumble

# 'flask_secret': To use a token, Flask needs a password to encrypt/sign cookies.
#    This is absolutely necessary if auth_method is 'token'!
#flask_secret = ChangeThisPassword

# 'upload_enabled': Whether to enable the upload function of the web interface.
#    If this is False, only admins can upload files.
# 'maximum_upload_file_size': Maximum file size allowed for uploads.
#    Can be specified in B, KB, MB, GB, or TB.
#upload_enabled = True
#max_upload_file_size = 30MB

# The [debug] section contains settings to enable debugging messaages.
[debug]
# 'ffmpeg': Whether to display debug messages from ffmpeg.
# 'mumble_connection': Whether to display debug messages for the
#    connection to the Mumble server (from the pymumble library).
# 'youtube_dl': Whether to display debug messages from youtube-dl.
#ffmpeg = False
#mumble_connection = False
#youtube_dl = False

# The [radio] section contains a list of default radio stations.
[radio]
# List of radio stations you want to have by default, one entry per line.
#jazz = http://jazz-wr04.ice.infomaniak.ch/jazz-wr04-128.mp3 "Jazz Yeah !"

# The optional [youtube_dl] section contains options to customize youtube-dl
[youtube_dl]
# 'source_address': Set to '::' to force ipv6, "0.0.0.0" to force ipv4,
#    or else put the IP address you want to use here.
# 'cookie_file': Path of the cookie file to use, useful if you are being rate limited:
#    <https://github.com/ytdl-org/youtube-dl#http-error-429-too-many-requests-or-402-payment-required>
# 'user_agent': Set the User-Agent header when making requests to youtube.com.
# source_address = '::'
# cookie_file = /tmp/youtube-dl-cookie
# user-agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0"

# The [commands] section contains settings related to user commands sent via
# Mumble text messages.
[commands]
# 'command_symbol': List of characters recognized as a command prefix.
# 'split_username_at_space': Whether usernames should be split by a space,
#    in case you use these kinds of Mumo plugins:
#    <https://wiki.mumble.info/wiki/Mumo#Set_Status>
#split_username_at_space = False
#command_symbol = !:ÔºÅ

# You may also customize commands recognized by the bot. For a full list of commands,
#    see configuration.default.ini. Copy options you want to edit into this file.
#play_file = file, f
#play_file_match = filematch, fm
